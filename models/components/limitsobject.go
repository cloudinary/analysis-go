// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/cloudinary/analysis-go/cloudinaryanalysis/internal/utils"
	"time"
)

type Limit struct {
	Type Feature `json:"type"`
	// The amount of quota used by the current request
	UsedByRequest *int64 `json:"used_by_request,omitempty"`
	// The remaining quota
	Remaining *int64 `json:"remaining,omitempty"`
	// The total quota limit
	Limit *int64 `json:"limit,omitempty"`
	// Time in UTC when the limit will be reset
	ResetTime *time.Time `json:"reset_time,omitempty"`
}

func (l Limit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Limit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Limit) GetType() Feature {
	if o == nil {
		return Feature("")
	}
	return o.Type
}

func (o *Limit) GetUsedByRequest() *int64 {
	if o == nil {
		return nil
	}
	return o.UsedByRequest
}

func (o *Limit) GetRemaining() *int64 {
	if o == nil {
		return nil
	}
	return o.Remaining
}

func (o *Limit) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *Limit) GetResetTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ResetTime
}

type LimitsObject struct {
	Items []Limit `json:"items,omitempty"`
}

func (o *LimitsObject) GetItems() []Limit {
	if o == nil {
		return nil
	}
	return o.Items
}
